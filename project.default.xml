<application>
  <component name="ProjectManager">
    <defaultProject>
      <component name="Encoding" native2AsciiForPropertiesFiles="true" defaultCharsetForPropertiesFiles="UTF-8">
        <file url="PROJECT" charset="UTF-8" />
      </component>
      <component name="GradleLocalSettings">
        <option name="projectSyncType">
          <map>
            <entry key="$USER_HOME$/IdeaProjects/JForexUtils" value="PREVIEW" />
            <entry key="$USER_HOME$/IdeaProjects/JForexUtils21" value="PREVIEW" />
            <entry key="$USER_HOME$/IdeaProjects/jmeter" value="PREVIEW" />
            <entry key="$USER_HOME$/IdeaProjects/mybatis-plus" value="PREVIEW" />
          </map>
        </option>
      </component>
      <component name="JUnitGeneratorProjectSettings">
        <option name="outputFilePattern" value="${SOURCEPATH}/../../test/java/${PACKAGE}/${FILENAME}" />
        <option name="selectedTemplateKey" value="JUnit 4" />
        <option name="vmTemplates">
          <map>
            <entry key="JUnit 3" value="######################################################################################## &#10;## &#10;## Available variables: &#10;##         $entryList.methodList - List of method composites &#10;##         $entryList.privateMethodList - List of private method composites &#10;##         $entryList.fieldList - ArrayList of class scope field names &#10;##         $entryList.className - class name &#10;##         $entryList.packageName - package name &#10;##         $today - Todays date in MM/dd/yyyy format &#10;## &#10;##            MethodComposite variables: &#10;##                $method.name - Method Name &#10;##                $method.signature - Full method signature in String form &#10;##                $method.reflectionCode - list of strings representing commented out reflection code to access method (Private Methods) &#10;##                $method.paramNames - List of Strings representing the method's parameters' names &#10;##                $method.paramClasses - List of Strings representing the method's parameters' classes &#10;## &#10;## You can configure the output class name using &quot;testClass&quot; variable below. &#10;## Here are some examples: &#10;## Test${entry.ClassName} - will produce TestSomeClass &#10;## ${entry.className}Test - will produce SomeClassTest &#10;## &#10;######################################################################################## &#10;## &#10;#macro (cap $strIn)$strIn.valueOf($strIn.charAt(0)).toUpperCase()$strIn.substring(1)#end &#10;## Iterate through the list and generate testcase for every entry. &#10;#foreach ($entry in $entryList) &#10;#set( $testClass=&quot;${entry.className}Test&quot;) &#10;## &#10;package test.$entry.packageName; &#10;&#10;import junit.framework.Test; &#10;import junit.framework.TestSuite; &#10;import junit.framework.TestCase; &#10;&#10;/** &#10;* ${entry.className} Tester. &#10;* &#10;* @author &lt;Authors name&gt; &#10;* @since &lt;pre&gt;$today&lt;/pre&gt; &#10;* @version 1.0 &#10;*/ &#10;public class $testClass extends TestCase { &#10;public $testClass(String name) { &#10;super(name); &#10;} &#10;&#10;public void setUp() throws Exception { &#10;super.setUp(); &#10;} &#10;&#10;public void tearDown() throws Exception { &#10;super.tearDown(); &#10;} &#10;&#10;#foreach($method in $entry.methodList) &#10;/** &#10;* &#10;* Method: $method.signature &#10;* &#10;*/ &#10;public void test#cap(${method.name})() throws Exception { &#10;//TODO: Test goes here... &#10;} &#10;&#10;#end &#10;&#10;#foreach($method in $entry.privateMethodList) &#10;/** &#10;* &#10;* Method: $method.signature &#10;* &#10;*/ &#10;public void test#cap(${method.name})() throws Exception { &#10;//TODO: Test goes here... &#10;#foreach($string in $method.reflectionCode) &#10;$string &#10;#end &#10;} &#10;&#10;#end &#10;&#10;public static Test suite() { &#10;return new TestSuite(${testClass}.class); &#10;} &#10;} &#10;#end" />
            <entry key="JUnit 4" value="######################################################################################## &#10;## &#10;## Available variables: &#10;##         $entryList.methodList - List of method composites &#10;##         $entryList.privateMethodList - List of private method composites &#10;##         $entryList.fieldList - ArrayList of class scope field names &#10;##         $entryList.className - class name &#10;##         $entryList.packageName - package name &#10;##         $today - Todays date in MM/dd/yyyy format &#10;## &#10;##            MethodComposite variables: &#10;##                $method.name - Method Name &#10;##                $method.signature - Full method signature in String form &#10;##                $method.reflectionCode - list of strings representing commented out reflection code to access method (Private Methods) &#10;##                $method.paramNames - List of Strings representing the method's parameters' names &#10;##                $method.paramClasses - List of Strings representing the method's parameters' classes &#10;## &#10;## You can configure the output class name using &quot;testClass&quot; variable below. &#10;## Here are some examples: &#10;## Test${entry.ClassName} - will produce TestSomeClass &#10;## ${entry.className}Test - will produce SomeClassTest &#10;## &#10;######################################################################################## &#10;## &#10;#macro (cap $strIn)$strIn.valueOf($strIn.charAt(0)).toUpperCase()$strIn.substring(1)#end &#10;## Iterate through the list and generate testcase for every entry. &#10;#foreach ($entry in $entryList) &#10;#set( $testClass=&quot;${entry.className}Test&quot;) &#10;## &#10;package $entry.packageName; &#10;&#10;import org.junit.Test; &#10;import org.junit.Before; &#10;import org.junit.After; &#10;&#10;/** &#10;* ${entry.className} Tester. &#10;* &#10;* @author &lt;Authors name&gt; &#10;* @since &lt;pre&gt;$date&lt;/pre&gt; &#10;* @version 1.0 &#10;*/ &#10;public class $testClass { &#10;&#10;@Before&#10;public void before() throws Exception { &#10;} &#10;&#10;@After&#10;public void after() throws Exception { &#10;} &#10;&#10;#foreach($method in $entry.methodList) &#10;/** &#10;* &#10;* Method: $method.signature &#10;* &#10;*/ &#10;@Test&#10;public void test#cap(${method.name})() throws Exception { &#10;//TODO: Test goes here... &#10;} &#10;&#10;#end &#10;&#10;#foreach($method in $entry.privateMethodList) &#10;/** &#10;* &#10;* Method: $method.signature &#10;* &#10;*/ &#10;@Test&#10;public void test#cap(${method.name})() throws Exception { &#10;//TODO: Test goes here... &#10;#foreach($string in $method.reflectionCode) &#10;$string &#10;#end &#10;} &#10;&#10;#end &#10;} &#10;#end" />
          </map>
        </option>
      </component>
      <component name="MavenImportPreferences">
        <option name="importingSettings">
          <MavenImportingSettings>
            <option name="vmOptionsForImporter" value="-Xmx768m" />
          </MavenImportingSettings>
        </option>
      </component>
      <component name="PhpWorkspaceProjectConfiguration" backward_compatibility_performed="true" />
      <component name="ProjectViewState">
        <option name="abbreviatePackageNames" value="true" />
        <option name="hideEmptyMiddlePackages" value="true" />
        <option name="showLibraryContents" value="true" />
      </component>
      <component name="PropertiesComponent">
        <property name="last_opened_file_path" value="D:/Itsoftware/kkk" />
        <property name="nodejs_interpreter_path.stuck_in_default_project" value="undefined stuck path" />
        <property name="nodejs_npm_path_reset_for_default_project" value="true" />
        <property name="settings.editor.selected.configurable" value="File.Encoding" />
      </component>
      <component name="RunManager">
        <configuration default="true" type="Applet">
          <option name="POLICY_FILE" value="$APPLICATION_HOME_DIR$/bin/appletviewer.policy" />
          <method v="2">
            <option name="Make" enabled="true" />
          </method>
        </configuration>
        <configuration default="true" type="Application" factoryName="Application">
          <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
          <method v="2">
            <option name="Make" enabled="true" />
          </method>
        </configuration>
        <configuration default="true" type="JUnit" factoryName="JUnit">
          <option name="TEST_OBJECT" value="class" />
          <option name="WORKING_DIRECTORY" value="$MODULE_DIR$" />
          <method v="2">
            <option name="Make" enabled="true" />
          </method>
        </configuration>
        <configuration default="true" type="TestNG">
          <option name="WORKING_DIRECTORY" value="$MODULE_DIR$" />
          <properties />
          <listeners />
          <method v="2">
            <option name="Make" enabled="true" />
          </method>
        </configuration>
        <configuration default="true" type="#org.jetbrains.idea.devkit.run.PluginConfigurationType">
          <module name="" />
          <option name="VM_PARAMETERS" value="-Xmx512m -Xms256m -XX:MaxPermSize=250m -ea" />
          <option name="PROGRAM_PARAMETERS" />
          <predefined_log_file enabled="true" id="idea.log" />
          <method v="2">
            <option name="Make" enabled="true" />
          </method>
        </configuration>
      </component>
      <component name="SvnConfiguration">
        <configuration>C:\Users\Hikaru\AppData\Roaming\Subversion</configuration>
      </component>
      <component name="masterDetails">
        <states>
          <state key="ProjectJDKs.UI">
            <settings>
              <last-edited>1.8</last-edited>
              <splitter-proportions>
                <option name="proportions">
                  <list>
                    <option value="0.20682149" />
                  </list>
                </option>
              </splitter-proportions>
            </settings>
          </state>
        </states>
      </component>
    </defaultProject>
  </component>
</application>